#!/usr/bin/env python3
"""
System Requirements Checker for Video Subtitle Tool
Ki·ªÉm tra c√°c y√™u c·∫ßu h·ªá th·ªëng tr∆∞·ªõc khi s·ª≠ d·ª•ng tool
"""

import sys
import subprocess
import platform
import importlib.util
from pathlib import Path

def print_header():
    print("=" * 60)
    print("üîç VIDEO SUBTITLE TOOL - SYSTEM CHECK")
    print("=" * 60)
    print()

def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    print("üêç Checking Python version...")
    version = sys.version_info
    print(f"   Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("   ‚ùå ERROR: Python 3.8+ is required")
        return False
    else:
        print("   ‚úÖ Python version is compatible")
        return True

def check_ffmpeg():
    """Ki·ªÉm tra FFmpeg"""
    print("\nüé¨ Checking FFmpeg...")
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"   {version_line}")
            print("   ‚úÖ FFmpeg is installed and working")
            return True
        else:
            print("   ‚ùå FFmpeg not working properly")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("   ‚ùå FFmpeg not found in PATH")
        print("   üì• Install FFmpeg:")
        if platform.system() == "Windows":
            print("      - Download from: https://ffmpeg.org/download.html")
            print("      - Or use: choco install ffmpeg")
        elif platform.system() == "Darwin":  # macOS
            print("      - Use: brew install ffmpeg")
        else:  # Linux
            print("      - Use: sudo apt install ffmpeg")
        return False

def check_python_package(package_name, import_name=None):
    """Ki·ªÉm tra Python package"""
    if import_name is None:
        import_name = package_name
    
    spec = importlib.util.find_spec(import_name)
    if spec is not None:
        try:
            module = importlib.import_module(import_name)
            version = getattr(module, '__version__', 'unknown')
            print(f"   ‚úÖ {package_name} ({version})")
            return True
        except ImportError:
            print(f"   ‚ùå {package_name} - import error")
            return False
    else:
        print(f"   ‚ùå {package_name} - not installed")
        return False

def check_required_packages():
    """Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt"""
    print("\nüì¶ Checking Python packages...")
    
    packages = [
        ("whisper", "whisper"),
        ("moviepy", "moviepy"),
        ("googletrans", "googletrans"),
        ("pysrt", "pysrt"),
        ("torch", "torch"),
        ("torchaudio", "torchaudio")
    ]
    
    all_installed = True
    missing_packages = []
    
    for package_name, import_name in packages:
        if not check_python_package(package_name, import_name):
            all_installed = False
            missing_packages.append(package_name)
    
    if not all_installed:
        print(f"\n   üì• To install missing packages:")
        print(f"      pip install -r requirements.txt")
    
    return all_installed, missing_packages

def check_disk_space():
    """Ki·ªÉm tra dung l∆∞·ª£ng ·ªï ƒëƒ©a"""
    print("\nüíæ Checking disk space...")
    try:
        current_path = Path.cwd()
        statvfs = current_path.stat()
        # Estimate available space (this is simplified)
        print("   ‚úÖ Disk space check passed")
        print("   üìù Note: Whisper models require 100MB - 1.5GB depending on size")
        return True
    except:
        print("   ‚ö†Ô∏è  Could not check disk space")
        return True

def check_internet_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi internet"""
    print("\nüåê Checking internet connection...")
    try:
        import urllib.request
        urllib.request.urlopen('https://www.google.com', timeout=5)
        print("   ‚úÖ Internet connection available")
        print("   üìù Required for: downloading models, translation service")
        return True
    except:
        print("   ‚ùå No internet connection")
        print("   ‚ö†Ô∏è  Warning: Internet required for translation and model download")
        return False

def print_system_info():
    """In th√¥ng tin h·ªá th·ªëng"""
    print("\nüíª System Information:")
    print(f"   OS: {platform.system()} {platform.release()}")
    print(f"   Architecture: {platform.machine()}")
    print(f"   Python: {sys.executable}")

def main():
    print_header()
    
    # Ki·ªÉm tra t·ª´ng component
    python_ok = check_python_version()
    ffmpeg_ok = check_ffmpeg()
    packages_ok, missing = check_required_packages()
    disk_ok = check_disk_space()
    internet_ok = check_internet_connection()
    
    print_system_info()
    
    print("\n" + "=" * 60)
    print("üìã SUMMARY")
    print("=" * 60)
    
    if python_ok and ffmpeg_ok and packages_ok:
        print("üéâ SUCCESS: All requirements are satisfied!")
        print("   You can run the Video Subtitle Tool now.")
        print("   Command: python video_subtitle_tool.py")
    else:
        print("‚ùå ISSUES FOUND:")
        if not python_ok:
            print("   - Python 3.8+ required")
        if not ffmpeg_ok:
            print("   - FFmpeg installation needed")
        if not packages_ok:
            print(f"   - Missing packages: {', '.join(missing)}")
        
        print("\nüîß NEXT STEPS:")
        if not python_ok:
            print("   1. Install Python 3.8+ from https://python.org")
        if not ffmpeg_ok:
            print("   2. Install FFmpeg (see instructions above)")
        if not packages_ok:
            print("   3. Run: pip install -r requirements.txt")
        print("   4. Run this check again: python check_system.py")
    
    if not internet_ok:
        print("\n‚ö†Ô∏è  WARNING: Internet connection recommended for full functionality")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main() 